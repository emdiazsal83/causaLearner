nodesUnif <-  list(x=list(dist="rnorm", pars=list(mean=0, sd=1), a=1, b=1),
y=list(dist="runif", pars=list(min=0, max=1), a=1, b=1))
funcs <- list(fx=function(n) n, fy=function(x, n) sin(x)*n)
sem <- list(dag=XtoY, funcs=funcs, simPars=list(n=200, nodes=nodesUnif))
dataTestList <- simSEMs(q, sem)
plotPairsList(dataTestList)
i <- 7
plot(dataTestList[[i]])
plot(dataTestList$xs[[i]])
i <- 7
plot(dataTestList$xs[[i]])
nodesUnif <-  list(x=list(dist="rnorm", pars=list(mean=0, sd=1), a=1, b=1),
y=list(dist="runif", pars=list(min=-1, max=1), a=1, b=1))
funcs <- list(fx=function(n) n, fy=function(x, n) sin(x)*n)
sem <- list(dag=XtoY, funcs=funcs, simPars=list(n=200, nodes=nodesUnif))
dataTestList <- simSEMs(q, sem)
plotPairsList(dataTestList)
i <- 7
plot(dataTestList$xs[[i]])
unique(dataTestList$dags, MARGIN=3)
i <- 50
plot(dataTestList$xs[[i]])
pm <- proc.time()
msrs <- mcmapply(function(el, nm){
# i <- 9; el <- dataTestList$xs[[i]]; nm <- dataTestList$names[i]
X <- apply(el, 2, stdrize)
print(paste("name: ", nm))
#print("head(X)")
#print(head(X))
#print(apply(X, 2, mean))
#print(apply(X, 2, sd))
x <- X[,1]
y <- X[,2]
trainDataXY <- constructData(as.matrix(x), y)
trainDataYX <- constructData(as.matrix(y), x)
# train hyperparameters
cmem_rbf_rbf_L2_none_xy <- setParams(learner=cmem_rbf_rbf_L2_none, trainData=trainDataXY, plot=FALSE)
cmem_rbf_rbf_L2_none_yx <- setParams(learner=cmem_rbf_rbf_L2_none, trainDataYX, plot=FALSE)
cmem_rbf_rbf_L2_lambda_xy <- setParams(learner=cmem_rbf_rbf_L2_lambda, trainDataXY, plot=FALSE)
cmem_rbf_rbf_L2_lambda_yx <- setParams(learner=cmem_rbf_rbf_L2_lambda, trainDataYX, plot=FALSE)
cmem_rbf_rbf_L2_lambda_kernParsX_xy <- setParams(learner=cmem_rbf_rbf_L2_lambda_kernParsX, trainDataXY, plot=FALSE)
cmem_rbf_rbf_L2_lambda_kernParsX_yx <- setParams(learner=cmem_rbf_rbf_L2_lambda_kernParsX, trainDataYX, plot=FALSE)
cmem_rbf_rbf_L2_lambda_kernParsXY_xy <- setParams(learner=cmem_rbf_rbf_L2_lambda_kernParsXY, trainDataXY, plot=FALSE)
cmem_rbf_rbf_L2_lambda_kernParsXY_yx <- setParams(learner=cmem_rbf_rbf_L2_lambda_kernParsXY, trainDataYX, plot=FALSE)
# train learn parameters
cmem_rbf_rbf_L2_none_xy <- cmem_rbf_rbf_L2_none$learn(cmem_rbf_rbf_L2_none_xy)
cmem_rbf_rbf_L2_none_yx <- cmem_rbf_rbf_L2_none$learn(cmem_rbf_rbf_L2_none_yx)
cmem_rbf_rbf_L2_lambda_xy <- cmem_rbf_rbf_L2_lambda$learn(cmem_rbf_rbf_L2_lambda_xy)
cmem_rbf_rbf_L2_lambda_yx <- cmem_rbf_rbf_L2_lambda$learn(cmem_rbf_rbf_L2_lambda_yx)
cmem_rbf_rbf_L2_lambda_kernParsX_xy <- cmem_rbf_rbf_L2_lambda_kernParsX$learn(cmem_rbf_rbf_L2_lambda_kernParsX_xy)
cmem_rbf_rbf_L2_lambda_kernParsX_yx <- cmem_rbf_rbf_L2_lambda_kernParsX$learn(cmem_rbf_rbf_L2_lambda_kernParsX_yx)
cmem_rbf_rbf_L2_lambda_kernParsXY_xy <- cmem_rbf_rbf_L2_lambda_kernParsXY$learn(cmem_rbf_rbf_L2_lambda_kernParsXY_xy)
cmem_rbf_rbf_L2_lambda_kernParsXY_yx <- cmem_rbf_rbf_L2_lambda_kernParsXY$learn(cmem_rbf_rbf_L2_lambda_kernParsXY_yx)
# calculate measures
msrsFixXY <- cmem_rbf_rbf_L2_none_xy$calcMsrs(cmem_rbf_rbf_L2_none_xy)
msrsFixYX <- cmem_rbf_rbf_L2_none_yx$calcMsrs(cmem_rbf_rbf_L2_none_yx)
msrsOpt1XY <- cmem_rbf_rbf_L2_lambda_xy$calcMsrs(cmem_rbf_rbf_L2_lambda_xy)
msrsOpt1YX <- cmem_rbf_rbf_L2_lambda_yx$calcMsrs(cmem_rbf_rbf_L2_lambda_yx)
msrsOpt2XY <- cmem_rbf_rbf_L2_lambda_kernParsX_xy$calcMsrs(cmem_rbf_rbf_L2_lambda_kernParsX_xy)
msrsOpt2YX <- cmem_rbf_rbf_L2_lambda_kernParsX_yx$calcMsrs(cmem_rbf_rbf_L2_lambda_kernParsX_yx)
msrsOpt3XY <- cmem_rbf_rbf_L2_lambda_kernParsXY_xy$calcMsrs(cmem_rbf_rbf_L2_lambda_kernParsXY_xy)
msrsOpt3YX <- cmem_rbf_rbf_L2_lambda_kernParsXY_yx$calcMsrs(cmem_rbf_rbf_L2_lambda_kernParsXY_yx)
#KCDC lambda fix
KCDCq <- msrsFixYX["KCDC"]/msrsFixXY["KCDC"]
#KCDCrel lambda fix
KCDCrelq <- msrsFixYX["KCDCrel"]/msrsFixXY["KCDCrel"]
#KCDC lambda opt1
KCDCq_opt1 <- msrsOpt1YX["KCDC"]/msrsOpt1XY["KCDC"]
#KCDCrel lambda opt1
KCDCrelq_opt1 <- msrsOpt1YX["KCDCrel"]/msrsOpt1XY["KCDCrel"]
#KCDC lambda opt2
KCDCq_opt2 <- msrsOpt2YX["KCDC"]/msrsOpt2XY["KCDC"]
#KCDCrel lambda opt2
KCDCrelq_opt2 <- msrsOpt2YX["KCDCrel"]/msrsOpt2XY["KCDCrel"]
#KCDC lambda opt3
KCDCq_opt3 <- msrsOpt3YX["KCDC"]/msrsOpt3XY["KCDC"]
#KCDCrel lambda opt3
KCDCrelq_opt3 <- msrsOpt3YX["KCDCrel"]/msrsOpt3XY["KCDCrel"]
res <- c(KCDCq, KCDCrelq, KCDCq_opt1, KCDCrelq_opt1,KCDCq_opt2, KCDCrelq_opt2, KCDCq_opt3, KCDCrelq_opt3)
names(res) <- c("KCDC","KCDCrel","KCDCopt1","KCDCrelopt1","KCDCopt2","KCDCrelopt2","KCDCopt3","KCDCrelopt3")
#res <- c(KCDCq, KCDCrelq, KCDCq_opt1, KCDCrelq_opt1,KCDCq_opt2, KCDCrelq_opt2)
#names(res) <- c("KCDC","KCDCrel","KCDCopt1","KCDCrelopt1","KCDCopt2","KCDCrelopt2")
return(res)
}, el=dataTestList$xs, nm=dataTestList$names,
SIMPLIFY="array", mc.cores=1)
proc.time() - pm
5811.929/60
save("msrs", file="/home/soulivanh/Documents/proyectos/indepReg/Mooij/R/pkg_learner/experiments/cmemLearners/testCMEMlearners_mult.RData")
msrsDB <- melt(msrs)
summary(t(msrs))
pctRight <- function(x){
res <- sum(x>1)/length(x)*100
return(res)
}
cast(msrsDB, measure~., value="value", fun.aggregate="pctRight")
head(msrsDB)
names(dimnames(msrs)) <- c("measure", "database")
save("msrs", file="/home/soulivanh/Documents/proyectos/indepReg/Mooij/R/pkg_learner/experiments/cmemLearners/testCMEMlearners.RData")
msrsDB <- melt(msrs)
pctRight <- function(x){
res <- sum(x>1)/length(x)*100
return(res)
}
cast(msrsDB, measure~., value="value", fun.aggregate="pctRight")
plot(dataTestList$xs[[i]])
hist(dataTestList$xs[[i]][,1])
hist(dataTestList$xs[[i]][,2])
plot(dataTestList$xs[[i]])
# demo of causality package
remove(list=ls())
setwd("/home/soulivanh/Documents/proyectos/indepReg/Mooij/R/pkg_causaLearner")
print("loading causal learners functions")
source("./func_causaLearners_v1.R", echo=FALSE)
#########################################################################################################################################3
# Load/simulate data on which we will evaluate performance of causal learners
#########################################################################################################################################
q <- 100
edgL <- vector("list", length=2)
names(edgL) <- c("x","y")
edgL[["x"]] <- list(edges=c("y"))
XtoY <- graphNEL(nodes=c("x","y"), edgeL=edgL, edgemode="directed")
plot(XtoY)
# define functions
# additive
funcsAdd_fA <- list(fx=function(n) n, fy=function(x, n) x^3 + x + n)
funcsAdd_fB <- list(fx=function(n) n, fy=function(x, n) log(x+10) + x^6 + n)
funcsAdd_fC <- list(fx=function(n) n, fy=function(x, n) sin(10*x)+exp(3*x) +
n)
# multiplicative
funcsMult_fA <- list(fx=function(n) n, fy=function(x, n) (x^3 + x)*n)
funcsMult_fB <- list(fx=function(n) n, fy=function(x, n) (sin(10*x)+exp(3*x))*exp(n))
funcsMult_fC <- list(fx=function(n) n, fy=function(x, n) log(x+10+x^6)*exp(n))
# more complex
funcsCmplx_fA <- list(fx=function(n) n, fy=function(x, n) (log(x+10)+x^2)^n)
funcsCmplx_fB <- list(fx=function(n) n, fy=function(x, n) log(x+10)+abs(x)^(2*abs(n))) #this one allowed roots of negative values so changed it
funcsCmplx_fC <- list(fx=function(n) n, fy=function(x, n) log(x^6+5)+x^5-sin((x^2)*abs(n)))
# define noise
# gaussian
nodesGauss <- list(x=list(dist="rnorm", pars=list(mean=0, sd=1), a=1, b=1),
y=list(dist="rnorm", pars=list(mean=0, sd=1), a=1, b=1))
# uniform
nodesUnif <-  list(x=list(dist="rnorm", pars=list(mean=0, sd=1), a=1, b=1),
y=list(dist="runif", pars=list(min=0, max=1), a=1, b=1))
# exponential
nodesExp <-  list(x=list(dist="rnorm", pars=list(mean=0, sd=1), a=1, b=1),
y=list(dist="rexp", pars=list(rate=1), a=1, b=1))
# define  SEMs
for(typeModel in c("Add", "Mult","Cmplx")){
for(exampleModel in c("A","B","C")){
for(nois in c("Gauss", "Unif", "Exp")){
# typeModel <- "Add"; exampleModel <- "A"; nois <- "Gauss"
sem <- list(dag=XtoY, funcs=eval(parse(text=paste("funcs", typeModel, "_f", exampleModel, sep=""))), simPars=list(n=100, nodes=eval(parse(text=paste("nodes", nois, sep="")))))
assign(paste("sem", typeModel,"_f", exampleModel,"_", nois, sep=""), sem)
}
}
}
# Perform all 3 type_funcs x 3 funcs per type_func x 3 noise per func = 27 simulations
set.seed(2)
plts <- list()
for(typeModel in c("Add", "Mult","Cmplx")){
for(exampleModel in c("A","B","C")){
for(nois in c("Gauss", "Unif", "Exp")){
# typeModel <- "Add"; exampleModel <- "A"; nois <- "Gauss"
sim <- simSEMs(q, eval(parse(text=paste("sem", typeModel, "_f", exampleModel, "_", nois, sep=""))))
name <- paste("sim", typeModel,"_f", exampleModel,"_", nois, sep="")
print(paste("name: ", name))
assign(name, sim)
plts <- c(plts, plotPairsList(sim))
}
}
}
indx1 <- substr(ls(),1,3)=="sim"
indx2 <- substr(ls(),4,6) %in% c("Add","Mul","Cmp")
sum(indx1 & indx2)
sims <- ls()[which(indx1 & indx2)]
sims
i <- 1
dim(do.call("rbind", eval(parse(text=sims[i]))$xs))
summary(do.call("rbind", eval(parse(text=sims[i]))$xs))
summary(do.call("rbind", eval(parse(text=sims[i]))$xs)[,2])
sum(is.na(do.call("rbind", eval(parse(text=sims[i]))$xs)[,2]))
sapply(sims, function(sim) sum(is.na(do.call("rbind", eval(parse(text=sim))$xs)[,2])))
sum(sapply(sims, function(sim) sum(is.na(do.call("rbind", eval(parse(text=sim))$xs)[,2]))))
# weights for each data set
ws <- rep(1, q)
ws <- ws/sum(ws)
names(ws) <- simAdd_fA_Gauss$names
#########################################################################################################################################3
# Construct recipes of causal learners to compare
#########################################################################################################################################
dataTreatmentList <- c("norm", "stdr")
approxDagSetMethodList <- c("oracleME1")
#hypScorerList <- cmem_hypScorer_pack1 #c("cmem1")
hypScorerList <- cmem_hypScorer_pack_none_1
#hypScorerList <- cmem_hypScorer_pack_lambda_1
#hypScorerList <- cmem_hypScorer_pack_kernParsX_1
#hypScorerList <- cmem_hypScorer_pack_kernParsXY_1
recipe <- genLearnRecipes(dataTreatmentList, approxDagSetMethodList, hypScorerList)
recipe
pm <- proc.time()
for(typeModel in c("Add", "Mult","Cmplx")){
for(exampleModel in c("A","B","C")){
for(nois in c("Gauss", "Unif", "Exp")){
# typeModel <- "Cmplx"; exampleModel <- "C"; nois <- "Unif"
flav <- paste(typeModel, "_f", exampleModel, "_", nois, sep="")
print(paste("type model: ", typeModel, ", example model: ", exampleModel, " noise type: ", nois))
print(flav)
scores <- applyLearnRecipes(recipe, dataList=eval(parse(text=paste("sim", flav, sep=""))), numCoresScores=3, numCoresDt=2, numCoresHypSc=1, plot=TRUE)
assign(paste("scores", flav, sep=""), scores)
}
}
}
proc.time()-pm
9714.833/60
9714.833/60/60
9714.833/60/60/27
9714.833/60/27
indx <- which(substr(ls(),1,6)=="scores" & nchar(ls())>6)
indx
sapply(ls()[indx], function(el) class(eval(parse(text=el))))
indx <- which(sapply(ls()[indx], function(el) class(eval(parse(text=el))))=="character")
indx
scores <- as.character()
for(typeModel in c("Add", "Mult","Cmplx")){
for(exampleModel in c("A","B","C")){
for(nois in c("Gauss", "Unif", "Exp")){
# typeModel <- "Add"; exampleModel <- "A"; nois <- "Gauss"
flav <- paste(typeModel, "_f", exampleModel, "_", nois, sep="")
print(paste("type model: ", typeModel, ", example model: ", exampleModel, " noise type: ", nois))
print(flav)
scores <- c(scores, paste("scores",flav,sep=""))
}
}
}
all(scores %in% ls())
save(list=scores, file="./experiments/exp_CMEM_mitrovicPaper_none.RData")
for(typeModel in c("Add", "Mult","Cmplx")){
for(exampleModel in c("A","B","C")){
for(nois in c("Gauss", "Unif", "Exp")){
# typeModel <- "Add"; exampleModel <- "A"; nois <- "Gauss"
flav <- paste(typeModel, "_f", exampleModel, "_", nois, sep="")
print(paste("type model: ", typeModel, ", example model: ", exampleModel, " noise type: ", nois))
print(flav)
aux <- deliverFuncToScore_recipeTree( eval(parse(text=paste("scores",flav, sep=""))), func ="tableErrors2")
errors <- unwrapScoreFunc(scoresFunc=aux, dataList=eval(parse(text=paste("sim",flav, sep=""))), ws)
print(cast(errors, score~. ,value="value", fun.aggregate=function(x) sum(x)))
}
}
}
for(typeModel in c("Add", "Mult","Cmplx")){
for(exampleModel in c("A","B","C")){
for(nois in c("Gauss", "Unif", "Exp")){
# typeModel <- "Add"; exampleModel <- "A"; nois <- "Gauss"
flav <- paste(typeModel, "_f", exampleModel, "_", nois, sep="")
print(paste("type model: ", typeModel, ", example model: ", exampleModel, " noise type: ", nois))
print(flav)
aux <- deliverFuncToScore_recipeTree( eval(parse(text=paste("scores",flav, sep=""))), func ="tableNoDecision")
errors <- unwrapScoreFunc(scoresFunc=aux, dataList=eval(parse(text=paste("sim",flav, sep=""))), ws)
print(cast(errors, score~. ,value="value", fun.aggregate=function(x) sum(x)))
}
}
}
groupFuncs <- c("agg_truevsRest")
groupFuncPars <- list(list())
#############################################
# Aggregate scores according to previous
# parameters
#############################################
n.boot <- 100
statsDB <- data.frame()
for(typeModel in c("Add", "Mult","Cmplx")){
for(exampleModel in c("A","B","C")){
for(nois in c("Gauss", "Unif", "Exp")){
# typeModel <- "Add"; exampleModel <- "A"; nois <- "Gauss"
flav <- paste(typeModel, "_f", exampleModel, "_", nois, sep="")
print(paste("type model: ", typeModel, ", example model: ", exampleModel, " noise type: ", nois))
print(flav)
# first aggregate by min score then rank by rank2func associated to the score
aggScores <- deliverFuncToScore_recipeTree(eval(parse(text=paste("scores",flav, sep=""))), func="aggregateScores", dags=eval(parse(text=paste("sim",flav,"$dags", sep=""))), getDagPars=function(dag, nm) return(list(trueDag=dag)), getDataLevelPars=getHypots, groupFuncs=groupFuncs, groupFuncPars=groupFuncPars, aggFunc="aggMin")
rnkDecs <- deliverFuncToScore_recipeTree(scores=aggScores, func="rankedDecisions", ppTab=1)
# Obtain measures and analyze
scoreDB <- unwrapScoreFunc(scoresFunc=rnkDecs, dataList=eval(parse(text=paste("sim",flav, sep=""))), ws)
rnkDecsArr <- scoreDBToArray(scoreDB, names_datasets=eval(parse(text=paste("sim",flav, "$names", sep=""))), value="value")
statsArr <- measures2DagClass(rankDecArray=rnkDecsArr, ws, n.boot)
statsDBaux <- statsArrayToDB(statsArr)
statsDBaux$typeModel <- typeModel
statsDBaux$exampleModel <- exampleModel
statsDBaux$noiseType <- nois
statsDB <- rbind(statsDB, statsDBaux)
}
}
}
save(list=c("scores", "statsDB"), file="./experiments/exp_CMEM_mitrovicPaper_none.RData")
msrss <- c("ccr")
stats <- c("orig")
dts <- c("stdr")
cmplxFuncs <- c("KCDC_log_log", "KCDC_log_quad","KCDC_rbfMed_rbfMed")
for(typeMdl in c("Add","Mult","Cmplx")){
indx <- with(statsDB, which(measure %in% msrss & statistic %in% stats & dts %in% dt & cmplxFunc %in% cmplxFuncs & typeModel %in% typeMdl ))
tab <- cast(statsDB[indx,], typeModel+exampleModel+noiseType~cmplxFunc, value="value", fun.aggregate="median")
print(tab)
}
head(statsDB)
typeMdl <- "Add"
table(statsDB$cmplxFunc)
table(statsDB$hypSc)
msrss <- c("ccr")
stats <- c("orig")
dts <- c("stdr")
cmplxFuncs <- c("KCDC", "KCDCrel")
hypScs <- c("hs_cmem_log_quad_L2_none")
typeMdl <- "Add"
# typeMdl <- "Add"
indx <- with(statsDB, which(measure %in% msrss & statistic %in% stats & dt %in% dts & cmplxFunc %in% cmplxFuncs & typeModel %in% typeMdl & hypSc %in% hypScs))
indx
tab <- cast(statsDB[indx,], typeModel+exampleModel+noiseType~cmplxFunc, value="value", fun.aggregate="median")
print(tab)
for(typeMdl in c("Add","Mult","Cmplx")){
# typeMdl <- "Add"
indx <- with(statsDB, which(measure %in% msrss & statistic %in% stats & dt %in% dts & cmplxFunc %in% cmplxFuncs & typeModel %in% typeMdl & hypSc %in% hypScs))
tab <- cast(statsDB[indx,], typeModel+exampleModel+noiseType~cmplxFunc, value="value", fun.aggregate="median")
print(tab)
}
msrss <- c("ccr")
indx <- with(statsDB, which(measure %in% msrss))
p <- ggplot(statsDB[indx,])
p <- p + geom_jitter(aes(x=cmplxFunc, y=value, color=statistic), width=0.1)
p <- p + facet_grid(typeModel+exampleModel~noiseType, scales="free")
p <- p + theme(axis.text.x = element_text(angle = 90, hjust = 1))
p
msrss <- c("ccr")
indx <- with(statsDB, which(measure %in% msrss))
p <- ggplot(statsDB[indx,])
p <- p + geom_jitter(aes(x=cmplxFunc+hypSc, y=value, color=statistic), width=0.1)
p <- p + facet_grid(typeModel+exampleModel~noiseType, scales="free")
p <- p + theme(axis.text.x = element_text(angle = 90, hjust = 1))
p
indx <- with(statsDB, which(measure %in% msrss & cmplxFunc %in% cmplxFuncs))
p <- ggplot(statsDB[indx,])
p <- p + geom_jitter(aes(x=hypSc, y=value, color=statistic), width=0.1)
p <- p + facet_grid(typeModel+exampleModel~noiseType, scales="free")
p <- p + theme(axis.text.x = element_text(angle = 90, hjust = 1))
p
#hypScorerList <- cmem_hypScorer_pack1 #c("cmem1")
#hypScorerList <- cmem_hypScorer_pack_none_1
hypScorerList <- cmem_hypScorer_pack_lambda_1
recipe <- genLearnRecipes(dataTreatmentList, approxDagSetMethodList, hypScorerList)
recipe
pm <- proc.time()
for(typeModel in c("Add", "Mult","Cmplx")){
for(exampleModel in c("A","B","C")){
for(nois in c("Gauss", "Unif", "Exp")){
# typeModel <- "Cmplx"; exampleModel <- "C"; nois <- "Unif"
flav <- paste(typeModel, "_f", exampleModel, "_", nois, sep="")
print(paste("type model: ", typeModel, ", example model: ", exampleModel, " noise type: ", nois))
print(flav)
scores <- applyLearnRecipes(recipe, dataList=eval(parse(text=paste("sim", flav, sep=""))), numCoresScores=1, numCoresDt=1, numCoresHypSc=1, plot=TRUE)
assign(paste("scores", flav, sep=""), scores)
}
}
}
#dataTreatmentList <- c("norm", "stdr")
dataTreatmentList <- c("stdr")
approxDagSetMethodList <- c("oracleME1")
#hypScorerList <- cmem_hypScorer_pack1 #c("cmem1")
#hypScorerList <- cmem_hypScorer_pack_none_1
hypScorerList <- cmem_hypScorer_pack_lambda_1
hypScorerList
#hypScorerList <- cmem_hypScorer_pack1 #c("cmem1")
#hypScorerList <- cmem_hypScorer_pack_none_1
hypScorerList <- cmem_hypScorer_pack_lambda_1[6]
recipe <- genLearnRecipes(dataTreatmentList, approxDagSetMethodList, hypScorerList)
recipe
pm <- proc.time()
for(typeModel in c("Add", "Mult","Cmplx")){
for(exampleModel in c("A","B","C")){
for(nois in c("Gauss", "Unif", "Exp")){
# typeModel <- "Cmplx"; exampleModel <- "C"; nois <- "Unif"
flav <- paste(typeModel, "_f", exampleModel, "_", nois, sep="")
print(paste("type model: ", typeModel, ", example model: ", exampleModel, " noise type: ", nois))
print(flav)
scores <- applyLearnRecipes(recipe, dataList=eval(parse(text=paste("sim", flav, sep=""))), numCoresScores=1, numCoresDt=1, numCoresHypSc=2, plot=TRUE)
assign(paste("scores", flav, sep=""), scores)
}
}
}
pm <- proc.time()
for(typeModel in c("Add", "Mult","Cmplx")){
for(exampleModel in c("A","B","C")){
for(nois in c("Gauss", "Unif", "Exp")){
# typeModel <- "Cmplx"; exampleModel <- "C"; nois <- "Unif"
flav <- paste(typeModel, "_f", exampleModel, "_", nois, sep="")
print(paste("type model: ", typeModel, ", example model: ", exampleModel, " noise type: ", nois))
print(flav)
scores <- applyLearnRecipes(recipe, dataList=eval(parse(text=paste("sim", flav, sep=""))), numCoresScores=3, numCoresDt=1, numCoresHypSc=1, plot=TRUE)
assign(paste("scores", flav, sep=""), scores)
}
}
}
proc.time()-pm
6079.528/60
6079.528/60/60
6079.528/60/60/27
6079.528/60/27
indx <- which(substr(ls(),1,6)=="scores" & nchar(ls())>6)
sapply(ls()[indx], function(el) class(eval(parse(text=el))))
indx <- which(sapply(ls()[indx], function(el) class(eval(parse(text=el))))=="character")
indx
scores <- as.character()
for(typeModel in c("Add", "Mult","Cmplx")){
for(exampleModel in c("A","B","C")){
for(nois in c("Gauss", "Unif", "Exp")){
# typeModel <- "Add"; exampleModel <- "A"; nois <- "Gauss"
flav <- paste(typeModel, "_f", exampleModel, "_", nois, sep="")
print(paste("type model: ", typeModel, ", example model: ", exampleModel, " noise type: ", nois))
print(flav)
scores <- c(scores, paste("scores",flav,sep=""))
}
}
}
all(scores %in% ls())
for(typeModel in c("Add", "Mult","Cmplx")){
for(exampleModel in c("A","B","C")){
for(nois in c("Gauss", "Unif", "Exp")){
# typeModel <- "Add"; exampleModel <- "A"; nois <- "Gauss"
flav <- paste(typeModel, "_f", exampleModel, "_", nois, sep="")
print(paste("type model: ", typeModel, ", example model: ", exampleModel, " noise type: ", nois))
print(flav)
aux <- deliverFuncToScore_recipeTree( eval(parse(text=paste("scores",flav, sep=""))), func ="tableErrors2")
errors <- unwrapScoreFunc(scoresFunc=aux, dataList=eval(parse(text=paste("sim",flav, sep=""))), ws)
print(cast(errors, score~. ,value="value", fun.aggregate=function(x) sum(x)))
}
}
}
# what about non decision problem -> all hypothesis scores equal
for(typeModel in c("Add", "Mult","Cmplx")){
for(exampleModel in c("A","B","C")){
for(nois in c("Gauss", "Unif", "Exp")){
# typeModel <- "Add"; exampleModel <- "A"; nois <- "Gauss"
flav <- paste(typeModel, "_f", exampleModel, "_", nois, sep="")
print(paste("type model: ", typeModel, ", example model: ", exampleModel, " noise type: ", nois))
print(flav)
aux <- deliverFuncToScore_recipeTree( eval(parse(text=paste("scores",flav, sep=""))), func ="tableNoDecision")
errors <- unwrapScoreFunc(scoresFunc=aux, dataList=eval(parse(text=paste("sim",flav, sep=""))), ws)
print(cast(errors, score~. ,value="value", fun.aggregate=function(x) sum(x)))
}
}
}
#########################################################################################################################################3
# Obtain and visualize performance measures
#########################################################################################################################################
###############################################################
# Obtain dag-classification measures
###############################################################
#############################################
# first choose parameters for aggregating
# scores of sets of dags into two classes
#############################################
groupFuncs <- c("agg_truevsRest")
groupFuncPars <- list(list())
#############################################
# Aggregate scores according to previous
# parameters
#############################################
n.boot <- 100
statsDB <- data.frame()
for(typeModel in c("Add", "Mult","Cmplx")){
for(exampleModel in c("A","B","C")){
for(nois in c("Gauss", "Unif", "Exp")){
# typeModel <- "Add"; exampleModel <- "A"; nois <- "Gauss"
flav <- paste(typeModel, "_f", exampleModel, "_", nois, sep="")
print(paste("type model: ", typeModel, ", example model: ", exampleModel, " noise type: ", nois))
print(flav)
# first aggregate by min score then rank by rank2func associated to the score
aggScores <- deliverFuncToScore_recipeTree(eval(parse(text=paste("scores",flav, sep=""))), func="aggregateScores", dags=eval(parse(text=paste("sim",flav,"$dags", sep=""))), getDagPars=function(dag, nm) return(list(trueDag=dag)), getDataLevelPars=getHypots, groupFuncs=groupFuncs, groupFuncPars=groupFuncPars, aggFunc="aggMin")
rnkDecs <- deliverFuncToScore_recipeTree(scores=aggScores, func="rankedDecisions", ppTab=1)
# Obtain measures and analyze
scoreDB <- unwrapScoreFunc(scoresFunc=rnkDecs, dataList=eval(parse(text=paste("sim",flav, sep=""))), ws)
rnkDecsArr <- scoreDBToArray(scoreDB, names_datasets=eval(parse(text=paste("sim",flav, "$names", sep=""))), value="value")
statsArr <- measures2DagClass(rankDecArray=rnkDecsArr, ws, n.boot)
statsDBaux <- statsArrayToDB(statsArr)
statsDBaux$typeModel <- typeModel
statsDBaux$exampleModel <- exampleModel
statsDBaux$noiseType <- nois
statsDB <- rbind(statsDB, statsDBaux)
}
}
}
save(list=c("scores", "statsDB"), file="./experiments/exp_CMEM_mitrovicPaper_logQuad_lambda.RData")
msrss <- c("ccr")
stats <- c("orig")
dts <- c("stdr")
cmplxFuncs <- c("KCDC", "KCDCrel")
hypScs <- c("hs_cmem_log_quad_L2_none")
for(typeMdl in c("Add","Mult","Cmplx")){
# typeMdl <- "Add"
indx <- with(statsDB, which(measure %in% msrss & statistic %in% stats & dt %in% dts & cmplxFunc %in% cmplxFuncs & typeModel %in% typeMdl & hypSc %in% hypScs))
tab <- cast(statsDB[indx,], typeModel+exampleModel+noiseType~cmplxFunc, value="value", fun.aggregate="median")
print(tab)
}
msrss <- c("ccr")
stats <- c("orig")
dts <- c("stdr")
cmplxFuncs <- c("KCDC", "KCDCrel")
table(statsDB$hypSc)
hypScs <- c("hs_cmem_log_quad_L2_lambda")
for(typeMdl in c("Add","Mult","Cmplx")){
# typeMdl <- "Add"
indx <- with(statsDB, which(measure %in% msrss & statistic %in% stats & dt %in% dts & cmplxFunc %in% cmplxFuncs & typeModel %in% typeMdl & hypSc %in% hypScs))
tab <- cast(statsDB[indx,], typeModel+exampleModel+noiseType~cmplxFunc, value="value", fun.aggregate="median")
print(tab)
}
